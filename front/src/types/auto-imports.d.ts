/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// noinspection JSUnusedGlobalSymbols
// Generated by unplugin-auto-import
// biome-ignore lint: disable
export {}
declare global {
  const EffectScope: (typeof import('vue'))['EffectScope'];
  const _camelCase: (typeof import('lodash-es'))['camelCase'];
  const _clone: (typeof import('lodash-es'))['clone'];
  const _cloneDeep: (typeof import('lodash-es'))['cloneDeep'];
  const _debounce: (typeof import('lodash-es'))['debounce'];
  const _difference: (typeof import('lodash-es'))['difference'];
  const _forOwn: (typeof import('lodash-es'))['forOwn'];
  const _fromPairs: (typeof import('lodash-es'))['fromPairs'];
  const _get: (typeof import('lodash-es'))['get'];
  const _intersection: (typeof import('lodash-es'))['intersection'];
  const _intersectionWith: (typeof import('lodash-es'))['intersectionWith'];
  const _isArray: (typeof import('lodash-es'))['isArray'];
  const _isBoolean: (typeof import('lodash-es'))['isBoolean'];
  const _isEmpty: (typeof import('lodash-es'))['isEmpty'];
  const _isEqual: (typeof import('lodash-es'))['isEqual'];
  const _isFunction: (typeof import('lodash-es'))['isFunction'];
  const _isNil: (typeof import('lodash-es'))['isNil'];
  const _isNull: (typeof import('lodash-es'))['isNull'];
  const _isNumber: (typeof import('lodash-es'))['isNumber'];
  const _isObject: (typeof import('lodash-es'))['isObject'];
  const _isString: (typeof import('lodash-es'))['isString'];
  const _kebabCase: (typeof import('lodash-es'))['kebabCase'];
  const _lowerFirst: (typeof import('lodash-es'))['lowerFirst'];
  const _merge: (typeof import('lodash-es'))['merge'];
  const _mergeWith: (typeof import('lodash-es'))['mergeWith'];
  const _omit: (typeof import('lodash-es'))['omit'];
  const _pickBy: (typeof import('lodash-es'))['pickBy'];
  const _random: (typeof import('lodash-es'))['random'];
  const _set: (typeof import('lodash-es'))['set'];
  const _throttle: (typeof import('lodash-es'))['throttle'];
  const _unionWith: (typeof import('lodash-es'))['unionWith'];
  const _uniq: (typeof import('lodash-es'))['uniq'];
  const _uniqBy: (typeof import('lodash-es'))['uniqBy'];
  const _uniqueId: (typeof import('lodash-es'))['uniqueId'];
  const _unset: (typeof import('lodash-es'))['unset'];
  const _upperFirst: (typeof import('lodash-es'))['upperFirst'];
  const computed: (typeof import('vue'))['computed'];
  const createApp: (typeof import('vue'))['createApp'];
  const customRef: (typeof import('vue'))['customRef'];
  const defineAsyncComponent: (typeof import('vue'))['defineAsyncComponent'];
  const defineComponent: (typeof import('vue'))['defineComponent'];
  const effectScope: (typeof import('vue'))['effectScope'];
  const getCurrentInstance: (typeof import('vue'))['getCurrentInstance'];
  const getCurrentScope: (typeof import('vue'))['getCurrentScope'];
  const h: (typeof import('vue'))['h'];
  const inject: (typeof import('vue'))['inject'];
  const isProxy: (typeof import('vue'))['isProxy'];
  const isReactive: (typeof import('vue'))['isReactive'];
  const isReadonly: (typeof import('vue'))['isReadonly'];
  const isRef: (typeof import('vue'))['isRef'];
  const markRaw: (typeof import('vue'))['markRaw'];
  const nextTick: (typeof import('vue'))['nextTick'];
  const onActivated: (typeof import('vue'))['onActivated'];
  const onBeforeMount: (typeof import('vue'))['onBeforeMount'];
  const onBeforeRouteLeave: (typeof import('vue-router'))['onBeforeRouteLeave'];
  const onBeforeRouteUpdate: (typeof import('vue-router'))['onBeforeRouteUpdate'];
  const onBeforeUnmount: (typeof import('vue'))['onBeforeUnmount'];
  const onBeforeUpdate: (typeof import('vue'))['onBeforeUpdate'];
  const onDeactivated: (typeof import('vue'))['onDeactivated'];
  const onErrorCaptured: (typeof import('vue'))['onErrorCaptured'];
  const onMounted: (typeof import('vue'))['onMounted'];
  const onRenderTracked: (typeof import('vue'))['onRenderTracked'];
  const onRenderTriggered: (typeof import('vue'))['onRenderTriggered'];
  const onScopeDispose: (typeof import('vue'))['onScopeDispose'];
  const onServerPrefetch: (typeof import('vue'))['onServerPrefetch'];
  const onUnmounted: (typeof import('vue'))['onUnmounted'];
  const onUpdated: (typeof import('vue'))['onUpdated'];
  const onWatcherCleanup: (typeof import('vue'))['onWatcherCleanup'];
  const provide: (typeof import('vue'))['provide'];
  const reactive: (typeof import('vue'))['reactive'];
  const readonly: (typeof import('vue'))['readonly'];
  const ref: (typeof import('vue'))['ref'];
  const resolveComponent: (typeof import('vue'))['resolveComponent'];
  const shallowReactive: (typeof import('vue'))['shallowReactive'];
  const shallowReadonly: (typeof import('vue'))['shallowReadonly'];
  const shallowRef: (typeof import('vue'))['shallowRef'];
  const toRaw: (typeof import('vue'))['toRaw'];
  const toRef: (typeof import('vue'))['toRef'];
  const toRefs: (typeof import('vue'))['toRefs'];
  const toValue: (typeof import('vue'))['toValue'];
  const triggerRef: (typeof import('vue'))['triggerRef'];
  const unref: (typeof import('vue'))['unref'];
  const useAttrs: (typeof import('vue'))['useAttrs'];
  const useCssModule: (typeof import('vue'))['useCssModule'];
  const useCssVars: (typeof import('vue'))['useCssVars'];
  const useId: (typeof import('vue'))['useId'];
  const useLink: (typeof import('vue-router'))['useLink'];
  const useModel: (typeof import('vue'))['useModel'];
  const useRoute: (typeof import('vue-router'))['useRoute'];
  const useRouter: (typeof import('vue-router'))['useRouter'];
  const useSlots: (typeof import('vue'))['useSlots'];
  const useTemplateRef: (typeof import('vue'))['useTemplateRef'];
  const watch: (typeof import('vue'))['watch'];
  const watchEffect: (typeof import('vue'))['watchEffect'];
  const watchPostEffect: (typeof import('vue'))['watchPostEffect'];
  const watchSyncEffect: (typeof import('vue'))['watchSyncEffect'];
}
// for type re-export
declare global {
  // @ts-ignore
  export type {
    Component,
    ComponentPublicInstance,
    ComputedRef,
    DirectiveBinding,
    ExtractDefaultPropTypes,
    ExtractPropTypes,
    ExtractPublicPropTypes,
    InjectionKey,
    PropType,
    Ref,
    MaybeRef,
    MaybeRefOrGetter,
    VNode,
    WritableComputedRef,
  } from 'vue';
  import('vue');
}
