package com.begcode.monolith.domain;

import static com.begcode.monolith.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class UserAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserAllPropertiesEquals(User expected, User actual) {
        assertUserAutoGeneratedPropertiesEquals(expected, actual);
        assertUserAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserAllUpdatablePropertiesEquals(User expected, User actual) {
        assertUserUpdatableFieldsEquals(expected, actual);
        assertUserUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserAutoGeneratedPropertiesEquals(User expected, User actual) {
        assertThat(expected)
            .as("Verify User auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserUpdatableFieldsEquals(User expected, User actual) {
        assertThat(expected)
            .as("Verify User relevant properties")
            .satisfies(e -> assertThat(e.getLogin()).as("check login").isEqualTo(actual.getLogin()))
            .satisfies(e -> assertThat(e.getPassword()).as("check password").isEqualTo(actual.getPassword()))
            .satisfies(e -> assertThat(e.getFirstName()).as("check firstName").isEqualTo(actual.getFirstName()))
            .satisfies(e -> assertThat(e.getLastName()).as("check lastName").isEqualTo(actual.getLastName()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getMobile()).as("check mobile").isEqualTo(actual.getMobile()))
            .satisfies(
                e ->
                    assertThat(e.getBirthday())
                        .as("check birthday")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getBirthday())
            )
            .satisfies(e -> assertThat(e.getActivated()).as("check activated").isEqualTo(actual.getActivated()))
            .satisfies(e -> assertThat(e.getLangKey()).as("check langKey").isEqualTo(actual.getLangKey()))
            .satisfies(e -> assertThat(e.getImageUrl()).as("check imageUrl").isEqualTo(actual.getImageUrl()))
            .satisfies(e -> assertThat(e.getActivationKey()).as("check activationKey").isEqualTo(actual.getActivationKey()))
            .satisfies(e -> assertThat(e.getResetKey()).as("check resetKey").isEqualTo(actual.getResetKey()))
            .satisfies(e -> assertThat(e.getResetDate()).as("check resetDate").isEqualTo(actual.getResetDate()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()))
            .satisfies(e -> assertThat(e.getLastModifiedBy()).as("check lastModifiedBy").isEqualTo(actual.getLastModifiedBy()))
            .satisfies(e -> assertThat(e.getLastModifiedDate()).as("check lastModifiedDate").isEqualTo(actual.getLastModifiedDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserUpdatableRelationshipsEquals(User expected, User actual) {
        assertThat(expected)
            .as("Verify User relationships")
            .satisfies(e -> assertThat(e.getDepartment()).as("check department").isEqualTo(actual.getDepartment()))
            .satisfies(e -> assertThat(e.getPosition()).as("check position").isEqualTo(actual.getPosition()))
            .satisfies(e -> assertThat(e.getAuthorities()).as("check authorities").isEqualTo(actual.getAuthorities()));
    }
}
