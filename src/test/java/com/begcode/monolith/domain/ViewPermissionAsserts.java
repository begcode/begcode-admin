package com.begcode.monolith.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ViewPermissionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertViewPermissionAllPropertiesEquals(ViewPermission expected, ViewPermission actual) {
        assertViewPermissionAutoGeneratedPropertiesEquals(expected, actual);
        assertViewPermissionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertViewPermissionAllUpdatablePropertiesEquals(ViewPermission expected, ViewPermission actual) {
        assertViewPermissionUpdatableFieldsEquals(expected, actual);
        assertViewPermissionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertViewPermissionAutoGeneratedPropertiesEquals(ViewPermission expected, ViewPermission actual) {
        assertThat(expected)
            .as("Verify ViewPermission auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertViewPermissionUpdatableFieldsEquals(ViewPermission expected, ViewPermission actual) {
        assertThat(expected)
            .as("Verify ViewPermission relevant properties")
            .satisfies(e -> assertThat(e.getText()).as("check text").isEqualTo(actual.getText()))
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()))
            .satisfies(e -> assertThat(e.getLocaleKey()).as("check localeKey").isEqualTo(actual.getLocaleKey()))
            .satisfies(e -> assertThat(e.getGroup()).as("check group").isEqualTo(actual.getGroup()))
            .satisfies(e -> assertThat(e.getLink()).as("check link").isEqualTo(actual.getLink()))
            .satisfies(e -> assertThat(e.getExternalLink()).as("check externalLink").isEqualTo(actual.getExternalLink()))
            .satisfies(e -> assertThat(e.getTarget()).as("check target").isEqualTo(actual.getTarget()))
            .satisfies(e -> assertThat(e.getIcon()).as("check icon").isEqualTo(actual.getIcon()))
            .satisfies(e -> assertThat(e.getDisabled()).as("check disabled").isEqualTo(actual.getDisabled()))
            .satisfies(e -> assertThat(e.getHide()).as("check hide").isEqualTo(actual.getHide()))
            .satisfies(e -> assertThat(e.getHideInBreadcrumb()).as("check hideInBreadcrumb").isEqualTo(actual.getHideInBreadcrumb()))
            .satisfies(e -> assertThat(e.getShortcut()).as("check shortcut").isEqualTo(actual.getShortcut()))
            .satisfies(e -> assertThat(e.getShortcutRoot()).as("check shortcutRoot").isEqualTo(actual.getShortcutRoot()))
            .satisfies(e -> assertThat(e.getReuse()).as("check reuse").isEqualTo(actual.getReuse()))
            .satisfies(e -> assertThat(e.getCode()).as("check code").isEqualTo(actual.getCode()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getOrder()).as("check order").isEqualTo(actual.getOrder()))
            .satisfies(e -> assertThat(e.getApiPermissionCodes()).as("check apiPermissionCodes").isEqualTo(actual.getApiPermissionCodes()))
            .satisfies(e -> assertThat(e.getComponentFile()).as("check componentFile").isEqualTo(actual.getComponentFile()))
            .satisfies(e -> assertThat(e.getRedirect()).as("check redirect").isEqualTo(actual.getRedirect()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertViewPermissionUpdatableRelationshipsEquals(ViewPermission expected, ViewPermission actual) {
        assertThat(expected)
            .as("Verify ViewPermission relationships")
            .satisfies(e -> assertThat(e.getParent()).as("check parent").isEqualTo(actual.getParent()))
            .satisfies(e -> assertThat(e.getAuthorities()).as("check authorities").isEqualTo(actual.getAuthorities()));
    }
}
