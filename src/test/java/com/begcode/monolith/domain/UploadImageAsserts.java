package com.begcode.monolith.domain;

import static com.begcode.monolith.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class UploadImageAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUploadImageAllPropertiesEquals(UploadImage expected, UploadImage actual) {
        assertUploadImageAutoGeneratedPropertiesEquals(expected, actual);
        assertUploadImageAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUploadImageAllUpdatablePropertiesEquals(UploadImage expected, UploadImage actual) {
        assertUploadImageUpdatableFieldsEquals(expected, actual);
        assertUploadImageUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUploadImageAutoGeneratedPropertiesEquals(UploadImage expected, UploadImage actual) {
        assertThat(expected)
            .as("Verify UploadImage auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUploadImageUpdatableFieldsEquals(UploadImage expected, UploadImage actual) {
        assertThat(expected)
            .as("Verify UploadImage relevant properties")
            .satisfies(e -> assertThat(e.getUrl()).as("check url").isEqualTo(actual.getUrl()))
            .satisfies(e -> assertThat(e.getFullName()).as("check fullName").isEqualTo(actual.getFullName()))
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getExt()).as("check ext").isEqualTo(actual.getExt()))
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()))
            .satisfies(e -> assertThat(e.getPath()).as("check path").isEqualTo(actual.getPath()))
            .satisfies(e -> assertThat(e.getFolder()).as("check folder").isEqualTo(actual.getFolder()))
            .satisfies(e -> assertThat(e.getOwnerEntityName()).as("check ownerEntityName").isEqualTo(actual.getOwnerEntityName()))
            .satisfies(e -> assertThat(e.getOwnerEntityId()).as("check ownerEntityId").isEqualTo(actual.getOwnerEntityId()))
            .satisfies(e -> assertThat(e.getBusinessTitle()).as("check businessTitle").isEqualTo(actual.getBusinessTitle()))
            .satisfies(e -> assertThat(e.getBusinessDesc()).as("check businessDesc").isEqualTo(actual.getBusinessDesc()))
            .satisfies(e -> assertThat(e.getBusinessStatus()).as("check businessStatus").isEqualTo(actual.getBusinessStatus()))
            .satisfies(
                e ->
                    assertThat(e.getCreateAt())
                        .as("check createAt")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getCreateAt())
            )
            .satisfies(e -> assertThat(e.getFileSize()).as("check fileSize").isEqualTo(actual.getFileSize()))
            .satisfies(e -> assertThat(e.getSmartUrl()).as("check smartUrl").isEqualTo(actual.getSmartUrl()))
            .satisfies(e -> assertThat(e.getMediumUrl()).as("check mediumUrl").isEqualTo(actual.getMediumUrl()))
            .satisfies(e -> assertThat(e.getReferenceCount()).as("check referenceCount").isEqualTo(actual.getReferenceCount()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()))
            .satisfies(e -> assertThat(e.getLastModifiedBy()).as("check lastModifiedBy").isEqualTo(actual.getLastModifiedBy()))
            .satisfies(e -> assertThat(e.getLastModifiedDate()).as("check lastModifiedDate").isEqualTo(actual.getLastModifiedDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUploadImageUpdatableRelationshipsEquals(UploadImage expected, UploadImage actual) {
        assertThat(expected)
            .as("Verify UploadImage relationships")
            .satisfies(e -> assertThat(e.getCategory()).as("check category").isEqualTo(actual.getCategory()));
    }
}
