package com.begcode.monolith.settings.domain;

import static com.begcode.monolith.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class SysFillRuleAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSysFillRuleAllPropertiesEquals(SysFillRule expected, SysFillRule actual) {
        assertSysFillRuleAutoGeneratedPropertiesEquals(expected, actual);
        assertSysFillRuleAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSysFillRuleAllUpdatablePropertiesEquals(SysFillRule expected, SysFillRule actual) {
        assertSysFillRuleUpdatableFieldsEquals(expected, actual);
        assertSysFillRuleUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSysFillRuleAutoGeneratedPropertiesEquals(SysFillRule expected, SysFillRule actual) {
        assertThat(expected)
            .as("Verify SysFillRule auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSysFillRuleUpdatableFieldsEquals(SysFillRule expected, SysFillRule actual) {
        assertThat(expected)
            .as("Verify SysFillRule relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getCode()).as("check code").isEqualTo(actual.getCode()))
            .satisfies(e -> assertThat(e.getDesc()).as("check desc").isEqualTo(actual.getDesc()))
            .satisfies(e -> assertThat(e.getEnabled()).as("check enabled").isEqualTo(actual.getEnabled()))
            .satisfies(e -> assertThat(e.getResetFrequency()).as("check resetFrequency").isEqualTo(actual.getResetFrequency()))
            .satisfies(e -> assertThat(e.getSeqValue()).as("check seqValue").isEqualTo(actual.getSeqValue()))
            .satisfies(e -> assertThat(e.getFillValue()).as("check fillValue").isEqualTo(actual.getFillValue()))
            .satisfies(e -> assertThat(e.getImplClass()).as("check implClass").isEqualTo(actual.getImplClass()))
            .satisfies(e -> assertThat(e.getParams()).as("check params").isEqualTo(actual.getParams()))
            .satisfies(
                e ->
                    assertThat(e.getResetStartTime())
                        .as("check resetStartTime")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getResetStartTime())
            )
            .satisfies(
                e ->
                    assertThat(e.getResetEndTime())
                        .as("check resetEndTime")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getResetEndTime())
            )
            .satisfies(
                e ->
                    assertThat(e.getResetTime())
                        .as("check resetTime")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getResetTime())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSysFillRuleUpdatableRelationshipsEquals(SysFillRule expected, SysFillRule actual) {}
}
