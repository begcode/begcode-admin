package com.begcode.monolith.settings.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class RegionCodeAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRegionCodeAllPropertiesEquals(RegionCode expected, RegionCode actual) {
        assertRegionCodeAutoGeneratedPropertiesEquals(expected, actual);
        assertRegionCodeAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRegionCodeAllUpdatablePropertiesEquals(RegionCode expected, RegionCode actual) {
        assertRegionCodeUpdatableFieldsEquals(expected, actual);
        assertRegionCodeUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRegionCodeAutoGeneratedPropertiesEquals(RegionCode expected, RegionCode actual) {
        assertThat(expected)
            .as("Verify RegionCode auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRegionCodeUpdatableFieldsEquals(RegionCode expected, RegionCode actual) {
        assertThat(expected)
            .as("Verify RegionCode relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getAreaCode()).as("check areaCode").isEqualTo(actual.getAreaCode()))
            .satisfies(e -> assertThat(e.getCityCode()).as("check cityCode").isEqualTo(actual.getCityCode()))
            .satisfies(e -> assertThat(e.getMergerName()).as("check mergerName").isEqualTo(actual.getMergerName()))
            .satisfies(e -> assertThat(e.getShortName()).as("check shortName").isEqualTo(actual.getShortName()))
            .satisfies(e -> assertThat(e.getZipCode()).as("check zipCode").isEqualTo(actual.getZipCode()))
            .satisfies(e -> assertThat(e.getLevel()).as("check level").isEqualTo(actual.getLevel()))
            .satisfies(e -> assertThat(e.getLng()).as("check lng").isEqualTo(actual.getLng()))
            .satisfies(e -> assertThat(e.getLat()).as("check lat").isEqualTo(actual.getLat()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRegionCodeUpdatableRelationshipsEquals(RegionCode expected, RegionCode actual) {
        assertThat(expected)
            .as("Verify RegionCode relationships")
            .satisfies(e -> assertThat(e.getParent()).as("check parent").isEqualTo(actual.getParent()));
    }
}
