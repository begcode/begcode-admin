package com.begcode.monolith.settings.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class DictionaryAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDictionaryAllPropertiesEquals(Dictionary expected, Dictionary actual) {
        assertDictionaryAutoGeneratedPropertiesEquals(expected, actual);
        assertDictionaryAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDictionaryAllUpdatablePropertiesEquals(Dictionary expected, Dictionary actual) {
        assertDictionaryUpdatableFieldsEquals(expected, actual);
        assertDictionaryUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDictionaryAutoGeneratedPropertiesEquals(Dictionary expected, Dictionary actual) {
        assertThat(expected)
            .as("Verify Dictionary auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDictionaryUpdatableFieldsEquals(Dictionary expected, Dictionary actual) {
        assertThat(expected)
            .as("Verify Dictionary relevant properties")
            .satisfies(e -> assertThat(e.getDictName()).as("check dictName").isEqualTo(actual.getDictName()))
            .satisfies(e -> assertThat(e.getDictKey()).as("check dictKey").isEqualTo(actual.getDictKey()))
            .satisfies(e -> assertThat(e.getDisabled()).as("check disabled").isEqualTo(actual.getDisabled()))
            .satisfies(e -> assertThat(e.getSortValue()).as("check sortValue").isEqualTo(actual.getSortValue()))
            .satisfies(e -> assertThat(e.getBuiltIn()).as("check builtIn").isEqualTo(actual.getBuiltIn()))
            .satisfies(e -> assertThat(e.getSyncEnum()).as("check syncEnum").isEqualTo(actual.getSyncEnum()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDictionaryUpdatableRelationshipsEquals(Dictionary expected, Dictionary actual) {}
}
