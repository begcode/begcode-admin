package com.begcode.monolith.system.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class FormConfigAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFormConfigAllPropertiesEquals(FormConfig expected, FormConfig actual) {
        assertFormConfigAutoGeneratedPropertiesEquals(expected, actual);
        assertFormConfigAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFormConfigAllUpdatablePropertiesEquals(FormConfig expected, FormConfig actual) {
        assertFormConfigUpdatableFieldsEquals(expected, actual);
        assertFormConfigUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFormConfigAutoGeneratedPropertiesEquals(FormConfig expected, FormConfig actual) {
        assertThat(expected)
            .as("Verify FormConfig auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFormConfigUpdatableFieldsEquals(FormConfig expected, FormConfig actual) {
        assertThat(expected)
            .as("Verify FormConfig relevant properties")
            .satisfies(e -> assertThat(e.getFormKey()).as("check formKey").isEqualTo(actual.getFormKey()))
            .satisfies(e -> assertThat(e.getFormName()).as("check formName").isEqualTo(actual.getFormName()))
            .satisfies(e -> assertThat(e.getFormJson()).as("check formJson").isEqualTo(actual.getFormJson()))
            .satisfies(e -> assertThat(e.getFormType()).as("check formType").isEqualTo(actual.getFormType()))
            .satisfies(e -> assertThat(e.getMultiItems()).as("check multiItems").isEqualTo(actual.getMultiItems()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()))
            .satisfies(e -> assertThat(e.getLastModifiedBy()).as("check lastModifiedBy").isEqualTo(actual.getLastModifiedBy()))
            .satisfies(e -> assertThat(e.getLastModifiedDate()).as("check lastModifiedDate").isEqualTo(actual.getLastModifiedDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFormConfigUpdatableRelationshipsEquals(FormConfig expected, FormConfig actual) {
        assertThat(expected)
            .as("Verify FormConfig relationships")
            .satisfies(e -> assertThat(e.getBusinessType()).as("check businessType").isEqualTo(actual.getBusinessType()));
    }
}
