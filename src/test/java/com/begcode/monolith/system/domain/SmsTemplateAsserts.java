package com.begcode.monolith.system.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SmsTemplateAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSmsTemplateAllPropertiesEquals(SmsTemplate expected, SmsTemplate actual) {
        assertSmsTemplateAutoGeneratedPropertiesEquals(expected, actual);
        assertSmsTemplateAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSmsTemplateAllUpdatablePropertiesEquals(SmsTemplate expected, SmsTemplate actual) {
        assertSmsTemplateUpdatableFieldsEquals(expected, actual);
        assertSmsTemplateUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSmsTemplateAutoGeneratedPropertiesEquals(SmsTemplate expected, SmsTemplate actual) {
        assertThat(expected)
            .as("Verify SmsTemplate auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSmsTemplateUpdatableFieldsEquals(SmsTemplate expected, SmsTemplate actual) {
        assertThat(expected)
            .as("Verify SmsTemplate relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getCode()).as("check code").isEqualTo(actual.getCode()))
            .satisfies(e -> assertThat(e.getSendType()).as("check sendType").isEqualTo(actual.getSendType()))
            .satisfies(e -> assertThat(e.getContent()).as("check content").isEqualTo(actual.getContent()))
            .satisfies(e -> assertThat(e.getTestJson()).as("check testJson").isEqualTo(actual.getTestJson()))
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()))
            .satisfies(e -> assertThat(e.getRemark()).as("check remark").isEqualTo(actual.getRemark()))
            .satisfies(e -> assertThat(e.getEnabled()).as("check enabled").isEqualTo(actual.getEnabled()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()))
            .satisfies(e -> assertThat(e.getLastModifiedBy()).as("check lastModifiedBy").isEqualTo(actual.getLastModifiedBy()))
            .satisfies(e -> assertThat(e.getLastModifiedDate()).as("check lastModifiedDate").isEqualTo(actual.getLastModifiedDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSmsTemplateUpdatableRelationshipsEquals(SmsTemplate expected, SmsTemplate actual) {
        assertThat(expected)
            .as("Verify SmsTemplate relationships")
            .satisfies(e -> assertThat(e.getSupplier()).as("check supplier").isEqualTo(actual.getSupplier()));
    }
}
