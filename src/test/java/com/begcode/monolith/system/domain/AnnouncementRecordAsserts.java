package com.begcode.monolith.system.domain;

import static com.begcode.monolith.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class AnnouncementRecordAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAnnouncementRecordAllPropertiesEquals(AnnouncementRecord expected, AnnouncementRecord actual) {
        assertAnnouncementRecordAutoGeneratedPropertiesEquals(expected, actual);
        assertAnnouncementRecordAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAnnouncementRecordAllUpdatablePropertiesEquals(AnnouncementRecord expected, AnnouncementRecord actual) {
        assertAnnouncementRecordUpdatableFieldsEquals(expected, actual);
        assertAnnouncementRecordUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAnnouncementRecordAutoGeneratedPropertiesEquals(AnnouncementRecord expected, AnnouncementRecord actual) {
        assertThat(expected)
            .as("Verify AnnouncementRecord auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAnnouncementRecordUpdatableFieldsEquals(AnnouncementRecord expected, AnnouncementRecord actual) {
        assertThat(expected)
            .as("Verify AnnouncementRecord relevant properties")
            .satisfies(e -> assertThat(e.getAnntId()).as("check anntId").isEqualTo(actual.getAnntId()))
            .satisfies(e -> assertThat(e.getUserId()).as("check userId").isEqualTo(actual.getUserId()))
            .satisfies(e -> assertThat(e.getHasRead()).as("check hasRead").isEqualTo(actual.getHasRead()))
            .satisfies(
                e ->
                    assertThat(e.getReadTime())
                        .as("check readTime")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getReadTime())
            )
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()))
            .satisfies(e -> assertThat(e.getLastModifiedBy()).as("check lastModifiedBy").isEqualTo(actual.getLastModifiedBy()))
            .satisfies(e -> assertThat(e.getLastModifiedDate()).as("check lastModifiedDate").isEqualTo(actual.getLastModifiedDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAnnouncementRecordUpdatableRelationshipsEquals(AnnouncementRecord expected, AnnouncementRecord actual) {}
}
