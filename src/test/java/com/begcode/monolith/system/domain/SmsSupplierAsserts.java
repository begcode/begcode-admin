package com.begcode.monolith.system.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SmsSupplierAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSmsSupplierAllPropertiesEquals(SmsSupplier expected, SmsSupplier actual) {
        assertSmsSupplierAutoGeneratedPropertiesEquals(expected, actual);
        assertSmsSupplierAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSmsSupplierAllUpdatablePropertiesEquals(SmsSupplier expected, SmsSupplier actual) {
        assertSmsSupplierUpdatableFieldsEquals(expected, actual);
        assertSmsSupplierUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSmsSupplierAutoGeneratedPropertiesEquals(SmsSupplier expected, SmsSupplier actual) {
        assertThat(expected)
            .as("Verify SmsSupplier auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSmsSupplierUpdatableFieldsEquals(SmsSupplier expected, SmsSupplier actual) {
        assertThat(expected)
            .as("Verify SmsSupplier relevant properties")
            .satisfies(e -> assertThat(e.getProvider()).as("check provider").isEqualTo(actual.getProvider()))
            .satisfies(e -> assertThat(e.getConfigData()).as("check configData").isEqualTo(actual.getConfigData()))
            .satisfies(e -> assertThat(e.getSignName()).as("check signName").isEqualTo(actual.getSignName()))
            .satisfies(e -> assertThat(e.getRemark()).as("check remark").isEqualTo(actual.getRemark()))
            .satisfies(e -> assertThat(e.getEnabled()).as("check enabled").isEqualTo(actual.getEnabled()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSmsSupplierUpdatableRelationshipsEquals(SmsSupplier expected, SmsSupplier actual) {}
}
