package com.begcode.monolith.system.domain;

import static com.begcode.monolith.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class AnnouncementAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAnnouncementAllPropertiesEquals(Announcement expected, Announcement actual) {
        assertAnnouncementAutoGeneratedPropertiesEquals(expected, actual);
        assertAnnouncementAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAnnouncementAllUpdatablePropertiesEquals(Announcement expected, Announcement actual) {
        assertAnnouncementUpdatableFieldsEquals(expected, actual);
        assertAnnouncementUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAnnouncementAutoGeneratedPropertiesEquals(Announcement expected, Announcement actual) {
        assertThat(expected)
            .as("Verify Announcement auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAnnouncementUpdatableFieldsEquals(Announcement expected, Announcement actual) {
        assertThat(expected)
            .as("Verify Announcement relevant properties")
            .satisfies(e -> assertThat(e.getTitle()).as("check title").isEqualTo(actual.getTitle()))
            .satisfies(e -> assertThat(e.getSummary()).as("check summary").isEqualTo(actual.getSummary()))
            .satisfies(e -> assertThat(e.getContent()).as("check content").isEqualTo(actual.getContent()))
            .satisfies(
                e ->
                    assertThat(e.getStartTime())
                        .as("check startTime")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getStartTime())
            )
            .satisfies(
                e -> assertThat(e.getEndTime()).as("check endTime").usingComparator(zonedDataTimeSameInstant).isEqualTo(actual.getEndTime())
            )
            .satisfies(e -> assertThat(e.getSenderId()).as("check senderId").isEqualTo(actual.getSenderId()))
            .satisfies(e -> assertThat(e.getPriority()).as("check priority").isEqualTo(actual.getPriority()))
            .satisfies(e -> assertThat(e.getCategory()).as("check category").isEqualTo(actual.getCategory()))
            .satisfies(e -> assertThat(e.getReceiverType()).as("check receiverType").isEqualTo(actual.getReceiverType()))
            .satisfies(e -> assertThat(e.getSendStatus()).as("check sendStatus").isEqualTo(actual.getSendStatus()))
            .satisfies(
                e ->
                    assertThat(e.getSendTime())
                        .as("check sendTime")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getSendTime())
            )
            .satisfies(
                e ->
                    assertThat(e.getCancelTime())
                        .as("check cancelTime")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getCancelTime())
            )
            .satisfies(e -> assertThat(e.getBusinessType()).as("check businessType").isEqualTo(actual.getBusinessType()))
            .satisfies(e -> assertThat(e.getBusinessId()).as("check businessId").isEqualTo(actual.getBusinessId()))
            .satisfies(e -> assertThat(e.getOpenType()).as("check openType").isEqualTo(actual.getOpenType()))
            .satisfies(e -> assertThat(e.getOpenPage()).as("check openPage").isEqualTo(actual.getOpenPage()))
            .satisfies(e -> assertThat(e.getReceiverIds()).as("check receiverIds").isEqualTo(actual.getReceiverIds()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()))
            .satisfies(e -> assertThat(e.getLastModifiedBy()).as("check lastModifiedBy").isEqualTo(actual.getLastModifiedBy()))
            .satisfies(e -> assertThat(e.getLastModifiedDate()).as("check lastModifiedDate").isEqualTo(actual.getLastModifiedDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAnnouncementUpdatableRelationshipsEquals(Announcement expected, Announcement actual) {}
}
