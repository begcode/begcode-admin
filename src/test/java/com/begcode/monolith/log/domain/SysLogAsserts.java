package com.begcode.monolith.log.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SysLogAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSysLogAllPropertiesEquals(SysLog expected, SysLog actual) {
        assertSysLogAutoGeneratedPropertiesEquals(expected, actual);
        assertSysLogAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSysLogAllUpdatablePropertiesEquals(SysLog expected, SysLog actual) {
        assertSysLogUpdatableFieldsEquals(expected, actual);
        assertSysLogUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSysLogAutoGeneratedPropertiesEquals(SysLog expected, SysLog actual) {
        assertThat(expected)
            .as("Verify SysLog auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSysLogUpdatableFieldsEquals(SysLog expected, SysLog actual) {
        assertThat(expected)
            .as("Verify SysLog relevant properties")
            .satisfies(e -> assertThat(e.getRequestUrl()).as("check requestUrl").isEqualTo(actual.getRequestUrl()))
            .satisfies(e -> assertThat(e.getLogType()).as("check logType").isEqualTo(actual.getLogType()))
            .satisfies(e -> assertThat(e.getLogContent()).as("check logContent").isEqualTo(actual.getLogContent()))
            .satisfies(e -> assertThat(e.getOperateType()).as("check operateType").isEqualTo(actual.getOperateType()))
            .satisfies(e -> assertThat(e.getUserid()).as("check userid").isEqualTo(actual.getUserid()))
            .satisfies(e -> assertThat(e.getUsername()).as("check username").isEqualTo(actual.getUsername()))
            .satisfies(e -> assertThat(e.getIp()).as("check ip").isEqualTo(actual.getIp()))
            .satisfies(e -> assertThat(e.getMethod()).as("check method").isEqualTo(actual.getMethod()))
            .satisfies(e -> assertThat(e.getRequestParam()).as("check requestParam").isEqualTo(actual.getRequestParam()))
            .satisfies(e -> assertThat(e.getRequestType()).as("check requestType").isEqualTo(actual.getRequestType()))
            .satisfies(e -> assertThat(e.getCostTime()).as("check costTime").isEqualTo(actual.getCostTime()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()))
            .satisfies(e -> assertThat(e.getLastModifiedBy()).as("check lastModifiedBy").isEqualTo(actual.getLastModifiedBy()))
            .satisfies(e -> assertThat(e.getLastModifiedDate()).as("check lastModifiedDate").isEqualTo(actual.getLastModifiedDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSysLogUpdatableRelationshipsEquals(SysLog expected, SysLog actual) {}
}
